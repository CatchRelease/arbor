// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Tooltip /> properly renders a tooltip 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Tooltip
    text="Hello World"
  >
    <p>
      I have a tooltip
    </p>
  </Tooltip>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "animateFill": false,
      "animation": "fade",
      "arrow": true,
      "arrowSize": "small",
      "children": <p>
        I have a tooltip
      </p>,
      "className": "",
      "delay": 0,
      "disabled": false,
      "distance": 8,
      "duration": 300,
      "followCursor": false,
      "hideDelay": 0,
      "hideDuration": 375,
      "hideOnClick": true,
      "html": <Text
        color="white"
        fontSize="size2"
        px="smaller"
        py="smallest"
      >
        Hello World
      </Text>,
      "inertia": true,
      "interactive": false,
      "interactiveBorder": 2,
      "multiple": false,
      "offset": 0,
      "onHidden": [Function],
      "onHide": [Function],
      "onRequestClose": [Function],
      "onShow": [Function],
      "onShown": [Function],
      "popperOptions": Object {},
      "position": "top",
      "size": "regular",
      "sticky": false,
      "stickyDuration": 200,
      "style": Object {},
      "theme": "arbor",
      "touchHold": false,
      "trigger": "mouseenter focus",
      "unmountHTMLWhenHide": false,
      "updateDuration": 0,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "I have a tooltip",
      },
      "ref": null,
      "rendered": "I have a tooltip",
      "type": "p",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "animateFill": false,
        "animation": "fade",
        "arrow": true,
        "arrowSize": "small",
        "children": <p>
          I have a tooltip
        </p>,
        "className": "",
        "delay": 0,
        "disabled": false,
        "distance": 8,
        "duration": 300,
        "followCursor": false,
        "hideDelay": 0,
        "hideDuration": 375,
        "hideOnClick": true,
        "html": <Text
          color="white"
          fontSize="size2"
          px="smaller"
          py="smallest"
        >
          Hello World
        </Text>,
        "inertia": true,
        "interactive": false,
        "interactiveBorder": 2,
        "multiple": false,
        "offset": 0,
        "onHidden": [Function],
        "onHide": [Function],
        "onRequestClose": [Function],
        "onShow": [Function],
        "onShown": [Function],
        "popperOptions": Object {},
        "position": "top",
        "size": "regular",
        "sticky": false,
        "stickyDuration": 200,
        "style": Object {},
        "theme": "arbor",
        "touchHold": false,
        "trigger": "mouseenter focus",
        "unmountHTMLWhenHide": false,
        "updateDuration": 0,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "I have a tooltip",
        },
        "ref": null,
        "rendered": "I have a tooltip",
        "type": "p",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
